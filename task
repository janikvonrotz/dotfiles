#!/bin/bash

set -eo pipefail

# load env vars
if [ -f .env ]; then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

function help() {
    echo
    echo "$1 <command> [options]"
    echo
    echo "commands:"
    echo

cmd_width=24
opt_width=10
desc_width=60
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "Command" "Option" "Description"
echo "|$(printf '%*s' $((cmd_width + 2)) '' | tr ' ' '-')|$(printf '%*s' $((opt_width + 2)) '' | tr ' ' '-')|$(printf '%*s' $((desc_width + 2)) '' | tr ' ' '-')|"
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "enable-passwordless-sudo" "" "Get sudoers entry for passwordless sudo."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-desktop" "" "Install desktop tools."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-dev-tools" "" "Install rust, python, node version manager and tools."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-tmux" "" "Install tmux."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-vim" "" "Install vim and configure plugins."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-helix" "" "Install helix editor."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-nvim" "" "Install neovim and configure plugins."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-bash" "" "Configure bash."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-zsh" "" "Install zsh shell and oh-my-zsh."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-fish" "" "Install fish shell."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-git" "" "Configure git."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-pass" "" "Install and configure pass."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-zsh-theme" "" "Install zsh theme of choice."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "setup-work" "" "Clone work related git repos."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "setup-private" "" "Clone private git repos."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "update-pyenv" "" "Update pyenv."

    echo
}

case "$1" in

enable-passwordless-sudo)
    echo "Add user $USER to sudoers file."
    echo "$USER	ALL=(ALL) NOPASSWD: ALL" | sudo sh -c "cat >> /etc/sudoers.d/nopasswd"
    ;;
install-deskop)
    echo "Install thunderbird, firefox."
    sudo apt install -y thunderbird firefox

    echo "Install KeepassXC."
    sudo add-apt-repository ppa:phoerious/keepassxc
    sudo apt update && sudo apt install -y keepassxc

    echo "Install Nextcloud Desktop."
    sudo add-apt-repository ppa:xtradeb/apps
    sudo apt update && sudo apt install -y nextcloud-desktop
    ;;
install-docker)
    echo "Install docker."
    sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg |
        sudo apt-key add - &&
        sudo apt-key fingerprint 0EBFCD88
    sudo add-apt-repository \
        "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) \
        stable"
    sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io
    sudo usermod -aG docker $USER
    ;;
install-dev-tools)
    echo "Install vscodium."
    wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
        | gpg --dearmor \
        | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] https://download.vscodium.com/debs vscodium main' \
        | sudo tee /etc/apt/sources.list.d/vscodium.list
    sudo apt update && sudo apt install codium
    
    echo "Install rust and cargo."
    curl https://sh.rustup.rs -sSf | sh

    echo "Install node version manager."
    [ ! -d "$HOME/.nvm" ] && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash

    echo "Install python version manager."
    [ ! -d "$HOME/.pyenv" ] && git clone https://github.com/pyenv/pyenv.git ~/.pyenv

    echo "Install binaries."
    sudo apt install -y jq htop xclip ripgrep
    ;;
install-pass)
    echo "Install pass."
    sudo apt install -y pass pass-extension-otp

    echo "Clone pass repo."
    [ ! -d "$HOME/.password-store" ] && git clone git@gitlab.com:janikvonrotz/pass.git ~/.password-store

    echo "Import gpg key with this command."
    echo "gpg --import /path/to/user@example.com.private.gpg"
    ;;
install-tmux)

    echo "Install tmux."
    sudo apt install -y tmux

    echo "Install tmux plugins."
    [ ! -d "$HOME/.tmux" ] && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    echo "Copy tmux config."
    cp tmux/.tmux.conf ~
    ;;
install-fish)
    echo "Install fish."
    sudo apt install -y fish

    echo "Copy fish config."
    cp fish/config.fish ~/.config/fish/config.fish
    ;;
install-vim)
    echo "Install vim."
    sudo apt install -y vim

    echo "Copy vimrc config."
    cp vim/.vimrc ~

    echo "Install vim plugins."
    vim -c ":PlugInstall"
    ;;
install-helix)
    echo "Add helix ppa."
    sudo add-apt-repository ppa:maveonair/helix-editor
    sudo apt update

    echo "Install helix."
    sudo apt install helix

    echo "Copy vim keybindings."
    cp helix/config.toml ~/.config/helix/config.toml
    ;;
install-nvim)
    echo "Add neovim ppa."
    sudo add-apt-repository ppa:neovim-ppa/stable -y
    sudo apt update

    echo "Install neovim."
    sudo apt install -y neovim
    ;;
install-bash)
    echo "Copy bash completions."
    sudo cp bash/completions/* /etc/bash_completion.d/
    ;;
install-zsh)
    echo "Install zsh."
    sudo apt install -y zsh

    echo "Reset zsh."
    ZSH=

    echo "Remove oh-my-zsh folder."
    rm -rf ~/.oh-my-zsh

    echo "Set zsh custom."
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    cd ~

    echo "Install oh-my-zsh."
    curl -L https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh

    echo "Clone zsh autosuggestions."
    [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ] && git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"

    echo "Copy oh-my-zsh customizations."
    cp ~/dotfiles/oh-my-zsh/custom/*.zsh ~/.oh-my-zsh/custom

    echo "Copy oh-my-zsh completions."
    cp -r ~/dotfiles/oh-my-zsh/completions ~/.oh-my-zsh/completions

    echo "Clone z plugin."
    [ ! -d "$ZSH_CUSTOM/plugins/zsh-z" ] && git clone https://github.com/agkozak/zsh-z "$ZSH_CUSTOM/plugins/zsh-z"

    echo "Set plugins list for zshrc."
    sed -i'' 's/plugins=.*/plugins=(git fzf zsh-z ansible docker nvm pyenv kubectl minikube)/g' ~/.zshrc
    ;;
install-zsh-theme)
    echo "Clone and copy dracula theme."
    [ ! -d "zsh" ] && git clone https://github.com/dracula/zsh.git
    ln -s ~/dotfiles/zsh/dracula.zsh-theme ~/.oh-my-zsh/themes/dracula.zsh-theme

    echo "Set zsh default theme."
    sed -i'' 's/ZSH_THEME.*/ZSH_THEME="dracula"/g' ~/.zshrc
    ;;
install-git)
    echo "Copy git config."
    cp git/.gitconfig ~
    ;;
setup-private)
    echo "Pull janikvonrotz repos."
    [ ! -d "$HOME/knowledge" ] && git clone https://github.com/Mint-System/Odoo-Build.git ~/knowledge
    ;;
setup-work)
    echo "Pull Mint-System repos."
    [ ! -d "$HOME/Odoo-Build" ] && git clone https://github.com/Mint-System/Odoo-Build.git ~/Odoo-Build
    [ ! -d "$HOME/Ansible-Build" ] && git clone https://github.com/Mint-System/Ansible-Build.git ~/Ansible-Build
    ;;
update-pyenv)
    echo "Update pyenv"
    cd ~/.pyenv
    git pull
    ;;
*)
    help task
    exit 1
    ;;
esac
