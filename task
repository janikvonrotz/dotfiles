#!/bin/bash

set -eo pipefail

# load env vars
if [ -f .env ]; then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

function help() {
    echo
    echo "$1 <command> [options]"
    echo
    echo "commands:"
    echo

    CMD_WIDTH=24
    OPT_WIDTH=10
    DESC_WIDTH=60
    COLUMN="| %-${CMD_WIDTH}s | %-${OPT_WIDTH}s | %-${DESC_WIDTH}s |\n"

    printf "$COLUMN" "Command" "Option" "Description"
    echo "|$(printf '%*s' $((CMD_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((OPT_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((DESC_WIDTH + 2)) '' | tr ' ' '-')|"
    printf "$COLUMN" "activate-venv" "" "Source the Python venv with uv."
    printf "$COLUMN" "enable-passwordless-sudo" "" "Get sudoers entry for passwordless sudo."
    printf "$COLUMN" "commit-with-llm" "" "Commit with llm generated commit message."
    printf "$COLUMN" "init-venv" "" "Initialize the Python venv with uv."
    printf "$COLUMN" "install" "" "Install requirements for this project."
    printf "$COLUMN" "install-rust" "" "Install Rust."
    printf "$COLUMN" "install-python" "" "Install Python."
    printf "$COLUMN" "install-exo" "" "Install Exoscale cli."
    printf "$COLUMN" "install-element" "" "Install Element."
    printf "$COLUMN" "install-node" "" "Install pnpm and node lts."
    printf "$COLUMN" "install-buildkit" "" "Install buildkit cli."
    printf "$COLUMN" "install-docker" "" "Install Docker."
    printf "$COLUMN" "install-podman" "" "Install podman."
    printf "$COLUMN" "install-obsidian" "" "Install Obsidian."
    printf "$COLUMN" "install-kubectl" "" "Install kubectl."
    printf "$COLUMN" "install-kind" "" "Install kind."
    printf "$COLUMN" "install-kate" "" "Install Kate IDE."
    printf "$COLUMN" "install-keepass" "" "Install KeepassXC."
    printf "$COLUMN" "install-minikube" "" "Install kubectl and minikube."
    printf "$COLUMN" "install-nextcloud" "" "Install Nextcloud Desktop."
    printf "$COLUMN" "install-tmux" "" "Install tmux."
    printf "$COLUMN" "install-vim" "" "Install vim and configure plugins."
    printf "$COLUMN" "install-llm" "" "Intall LLM cli."
    printf "$COLUMN" "install-ollama" "" "Intall Ollama cli."
    printf "$COLUMN" "install-helix" "" "Install helix editor."
    printf "$COLUMN" "install-helm" "" "Install Helm."
    printf "$COLUMN" "install-nvim" "" "Install neovim and configure plugins."
    printf "$COLUMN" "install-bash" "" "Configure bash."
    printf "$COLUMN" "install-zsh" "" "Install zsh shell and oh-my-zsh."
    printf "$COLUMN" "install-librewolf" "" "Install LibreWolf."
    printf "$COLUMN" "install-fish" "" "Install fish shell."
    printf "$COLUMN" "install-qemu" "" "Install QUEMU."
    printf "$COLUMN" "install-fzf" "" "Install fzf."
    printf "$COLUMN" "install-git" "" "Configure git."
    printf "$COLUMN" "install-pass" "" "Install and configure pass."
    printf "$COLUMN" "install-sublime" "" "Install and configure Sublime IDE."
    printf "$COLUMN" "install-scripts" "" "Install bash scripts."
    printf "$COLUMN" "install-thunderbird" "" "Install Thunderbird."
    printf "$COLUMN" "install-zed" "" "Install Zed IDE."
    printf "$COLUMN" "install-threema" "" "Install Threema desktop client."
    printf "$COLUMN" "install-signal" "" "Install Signal desktop client."
    printf "$COLUMN" "install-vscodium" "" "Install VSCodium."
    printf "$COLUMN" "uninstall-docker" "" "Uninstall docker."
    printf "$COLUMN" "uninstall-docker" "" "Uninstall docker."
    printf "$COLUMN" "uninstall-vscodium" "" "Uninstall VSCodium."
    printf "$COLUMN" "run-open-webui" "" "Run Open WebUI."
    printf "$COLUMN" "setup-mint-system" "" "Clone Mint System git repos."
    printf "$COLUMN" "setup-steamdeck" "" "Setup steamdeck os."
    printf "$COLUMN" "setup-sozialinfo" "" "Clone Sozialinfo git repos."
    printf "$COLUMN" "setup-private" "" "Clone private git repos."
    printf "$COLUMN" "setup-appuio" "" "Install and setup APPUiO OpenShift cli."
    printf "$COLUMN" "version" "" "Show version of installed tools."
}

# Dynamic env vars

GIT_BRANCH=$(git symbolic-ref --short -q HEAD)

if command -v pacman >/dev/null 2>&1; then
    export PACKAGE_MANAGER="pacman"
elif command -v apt >/dev/null 2>&1; then
    export PACKAGE_MANAGER="apt"
else
    export PACKAGE_MANAGER="unknown"
fi

# Import commands

[ -f ~/taskfile.build/bin/commit-with-llm ] && source ~/taskfile.build/bin/commit-with-llm
[ -f ~/taskfile.build/bin/init-venv ] && source ~/taskfile.build/bin/init-venv

# Env commands

function install() {
    echo "Install bat, htop, jq, repgrep, xclip."
    sudo apt install -y jq htop xclip ripgrep bat

    echo "Install yq."
    sudo wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O /usr/bin/yq &&\
    sudo chmod +x /usr/bin/yq

    echo "Install wcurl."
    curl -fLO https://raw.githubusercontent.com/curl/wcurl/main/wcurl
    chmod +x wcurl && sudo mv wcurl /usr/local/bin/wcurl
}

function version() {
    uv --version
    docker --version
    docker-compose --version
}

# Config commands

function enable-passwordless-sudo() {
    echo "Add user $USER to sudoers file."
    sudo sh -c "echo \"$USER	ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/nopasswd"
}

# Install commands


function install-thunderbird() {
    echo "Install Thunderbird."
    sudo apt install -y thunderbird
}

function install-element() {
    echo "Install Element."
    sudo apt install -y wget apt-transport-https
    sudo wget -O /usr/share/keyrings/element-io-archive-keyring.gpg https://packages.element.io/debian/element-io-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/element-io-archive-keyring.gpg] https://packages.element.io/debian/ default main" | sudo tee /etc/apt/sources.list.d/element-io.list
    sudo apt update
    sudo apt install element-desktop
}

function install-keepass() {
    echo "Install KeepassXC."
    sudo add-apt-repository ppa:phoerious/keepassxc
    sudo apt update && sudo apt install -y keepassxc
}

function install-nextcloud() {
    echo "Install Nextcloud Desktop."
    sudo add-apt-repository ppa:xtradeb/apps
    sudo apt update && sudo apt install -y nextcloud-desktop
}

function install-librewolf() {
    echo "Install LibreWolf."
    sudo apt update && sudo apt install extrepo -y
    sudo extrepo enable librewolf
    sudo apt update && sudo apt install librewolf -y
}

function install-sublime() {
    echo "Install Sublime."
    wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null
    echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
    sudo apt-get update
    sudo apt-get install sublime-text

    echo "Copy sublime keybindings."
    cp "sublime/Default (Linux).sublime-keymap" ~/.config/sublime-text/Packages/User/

    echo "Link sublime binary."
    sudo ln -s /opt/sublime_text/sublime_text /usr/local/bin/subl
}

function install-kate() {
    echo "Install Kate."
    sudo add-apt-repository ppa:kubuntu-ppa/backports
    sudo apt-get update
    sudo apt-get install kate
}

function install-zed(){
    echo "Install Zed."
    curl -f https://zed.dev/install.sh | sh

    echo "Copy settings file."
    cp ./zed/settings.json ~/.config/zed/settings.json
}

function install-obsidian() {
    echo "Install Obsidian."
    RELEASE="1.8.9"
    wcurl "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.8.9/obsidian_1.8.9_amd64.deb"
    # wcurl "https://github.com/obsidianmd/obsidian-releases/releases/download/v$RELEASE/obsidian_${RELEASE}_amd64.deb"
    sudo apt install -y "./obsidian_${RELEASE}_amd64.deb"
    rm "obsidian_${RELEASE}_amd64.deb"
}

function install-docker() {
    echo "Install Docker."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        # https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository

        # Add Docker's official GPG key:
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        # Add the repository to Apt sources:
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update

        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo usermod -aG docker $USER
        newgrp docker

        echo  "Verify docker installation."
        docker run hello-world
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm docker
    fi
}

install-buildkit()  {
    echo "Install buildkit."
    wcurl https://github.com/moby/buildkit/releases/download/v0.22.0/buildkit-v0.22.0.linux-amd64.tar.gz -o tmp/buildkit.tar.gz
    mkdir -p tmp/buildkit
    tar -xvf tmp/buildkit.tar.gz -C tmp/buildkit
    sudo mv tmp/buildkit/bin/* /usr/local/bin
    rm -rf tmp/buildkit
    rm tmp/buildkit.tar.gz
}

function install-qemu() {
    echo "Install QEMU."
    sudo apt-get install -y qemu qemu-user-static binfmt-support

    echo "Copy docker config."
    sudo cp docker/daemon.json /etc/docker
    sudo systemctl restart docker
}

function install-fzf() {
    echo "Install fzf."
    [ ! -d "$HOME/.fzf" ] &&  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    yes | ~/.fzf/install
}

function install-podman() {
    echo "Install podman."
    sudo apt install -y podman

    echo "Add docker.io to search registry"
    sudo grep -qxF 'unqualified-search-registries = ["docker.io"]' /etc/containers/registries.conf || echo 'unqualified-search-registries = ["docker.io"]' | sudo tee -a /etc/containers/registries.conf
}

function install-kubectl() {
    echo "Install kubectl."
    # https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
    sudo apt-get update && sudo apt-get install -y kubectl
}

function install-kind() {
    echo "Install kind."
    # https://kind.sigs.k8s.io/docs/user/quick-start/#installation
    # For AMD64 / x86_64
    [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64
    # For ARM64
    [ $(uname -m) = aarch64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-arm64
    chmod +x ./kind
    sudo mv ./kind /usr/local/bin/kind
}

function install-llm() {
    echo "Install LLM."
    uv tool install llm

    echo "Copy extra openapi models config."
    cp "llm/extra-openai-models.yaml" "$(dirname $(llm logs path))/extra-openai-models.yaml"
    
    echo "Set infomaniak api key."
    llm keys set infomaniak --value "$(pass show env/api_key_infomaniak)"

    echo "Set llama as default model."
    llm models default llama
}

function install-ollama() {
    echo "Install Ollama."
    curl -fsSL https://ollama.com/install.sh | sh
}

function install-threema() {
    echo "Install Threema."
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    flatpak install --from https://releases.threema.ch/flatpak/threema-desktop/ch.threema.threema-desktop.flatpakref
}

function install-signal() {
    echo "Install Signal."
    # https://signal.org/download/#
    wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg;
    cat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null
    echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
    sudo tee /etc/apt/sources.list.d/signal-xenial.list
    sudo apt update && sudo apt install signal-desktop
}

function install-exo() {
    echo "Install exo."
    curl -fsSL https://raw.githubusercontent.com/exoscale/cli/master/install-latest.sh | sh
}

function install-minikube() {
    echo "Install minikube."
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
}

function install-vscodium() {
    echo "Install VSCodium."
    wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
        | gpg --dearmor \
        | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] https://download.vscodium.com/debs vscodium main' \
        | sudo tee /etc/apt/sources.list.d/vscodium.list
    sudo apt update && sudo apt install -y codium
}

function uninstall-vscodium() {
    echo "Uninstall VSCodium."
    sudo apt remove codium
}

function install-python() {
    echo "Install uv."
    curl -LsSf https://astral.sh/uv/install.sh | sh
}

function install-node() {
    echo "Install pnpm."
    curl -fsSL https://get.pnpm.io/install.sh | sh -

    echo "Run this command to install node for your project:"
    echo "pnpm install add global lts"
}

function install-pass() {
    echo "Install pass."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
         sudo apt install -y pass pass-extension-otp
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm pass
    fi

    echo "Clone pass repo."
    [ ! -d "$HOME/.password-store" ] && git clone git@gitlab.com:janikvonrotz/pass.git ~/.password-store

    echo "Import gpg key with this command."
    echo "gpg --import /path/to/user@example.com.private.gpg"
}

function install-scripts() {
    echo "Copy bin/* to ~/bin/"
    mkdir -p ~/bin
    sudo cp -r bin/* ~/bin/
}

function install-tmux() {

    echo "Install tmux."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y tmux
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm zsh
    fi

    echo "Install tmux plugins."
    [ ! -d "$HOME/.tmux" ] && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    echo "Copy tmux config."
    cp tmux/.tmux.conf ~

    echo "Source tmux config."
    tmux source ~/.tmux.conf

    echo "Open tmux and install plugins with: ctrl + b; shift + i"
}

function install-fish() {
    echo "Install fish."
    sudo apt install -y fish

    mkdir -p ~/.config/fish/completions

    echo "Copy fish config."
    cp fish/config.fish ~/.config/fish/config.fish

    echo "Copy fish completions."
    cp fish/completions/* ~/.config/fish/completions/
}

function install-vim() {
    echo "Install vim."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y vim
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S vim
    fi

    echo "Copy vimrc config."
    cp vim/.vimrc ~

    echo "Install vim plugins"
    vim -c ":PlugInstall"
}

function install-helix() {
    echo "Add helix ppa."
    sudo add-apt-repository ppa:maveonair/helix-editor
    sudo apt update

    echo "Install helix."
    sudo apt install -y helix

    echo "Copy vim keybindings."
    mkdir -p ~/.config/helix/
    cp helix/config.toml ~/.config/helix/config.toml
}

function install-helm() {
    echo  "Install Helm."
    curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
    sudo apt-get install apt-transport-https --yes
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
    sudo apt-get update
    sudo apt-get install helm
}

function install-nvim() {
    echo "Add neovim ppa."
    sudo add-apt-repository ppa:neovim-ppa/stable -y
    sudo apt update

    echo "Install neovim."
    sudo apt install -y neovim
}

function install-bash() {
    echo "Copy bash completions."
    sudo cp bash/completions/* /etc/bash_completion.d/

    echo "Copy bash aliases."
    sudo cp bash/.bash_aliases ~/.bash_aliases

    echo "Append bash runtime configuration."
    START_MARKER="# dotenv"
    END_MARKER="# dotenv end"
    sed -i "/$START_MARKER/,/$END_MARKER/d" ~/.bashrc
    {
        echo -e "\n$START_MARKER"
        cat bash/.bashrc
        echo "$END_MARKER"
    } >> ~/.bashrc
}

function install-zsh() {
    echo "Install zsh."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y zsh
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm zsh
    fi

    echo "Reset zsh."
    ZSH=

    echo "Remove oh-my-zsh folder."
    rm -rf ~/.oh-my-zsh

    echo "Set zsh custom."
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    cd ~

    echo "Install oh-my-zsh"
    curl -L https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh

    echo "Clone zsh autosuggestions."
    [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ] && git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"

    echo "Copy oh-my-zsh customizations."
    cp ~/dotfiles/oh-my-zsh/custom/*.zsh ~/.oh-my-zsh/custom

    echo "Copy oh-my-zsh completions."
    cp -r ~/dotfiles/oh-my-zsh/completions ~/.oh-my-zsh/completions

    echo "Set plugins list for zshrc."
    sed -i'' 's/plugins=.*/plugins=(ansible docker fzf git helm kubectl minikube podman)/g' ~/.zshrc

    echo "Set zsh default theme."
    sed -i'' 's/ZSH_THEME.*/ZSH_THEME="eastwood"/g' ~/.zshrc
}

function install-git() {
    echo "Copy git config."
    cp git/.gitconfig ~

    echo "Install GitHub cli."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
            && sudo mkdir -p -m 755 /etc/apt/keyrings \
                && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
                && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
            && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install -y gh
    fi
}

# Uninstall commands

function uninstall-docker() {
    echo "Show install docker apps."
    dpkg -l | grep -i docker

    echo "Unistall Docker."

    sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli docker-compose-plugin
    sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce docker-compose-plugin

    sudo rm -rf /var/lib/docker /etc/docker
    sudo rm /etc/apparmor.d/docker
    sudo groupdel docker
    sudo rm -rf /var/run/docker.sock
    sudo rm -rf /var/lib/containerd
}

function uninstall-obsidian() {
    echo "Uninstall Obsidian."
    sudo apt-get remove -y obisidan
}

# Run commands

function run-open-webui() {
    DATA_DIR=~/.open-webui uvx --python 3.11 open-webui@latest serve
}

# Setup commands

function setup-steamdeck() {
    echo "If you have not already, use 'passwd' to create a password for the deck user."

    echo "Disable read-only mode."
    sudo steamos-readonly disable

    echo "Initialize the pacman keyring."
    sudo pacman-key --init

    echo "Populate the pacman keyring with the default Arch Linux keys."
    sudo pacman-key --populate archlinux holo

    echo "Try installing a package."
    sudo pacman -S vi
}

function setup-private() {
    echo "Pull janikvonrotz repos."
    [ ! -d "$HOME/taskfile.build" ] && git clone git@github.com:janikvonrotz/taskfile.build.git ~/taskfile.build
    [ ! -d "$HOME/knowledge" ] && git clone git@gitlab.com:janikvonrotz/knowledge.git ~/knowledge
    [ ! -d "$HOME/janikvonrotz.ch" ] && git clone git@github.com:janikvonrotz/janikvonrotz.ch.git ~/janikvonrotz.ch
    [ ! -d "$HOME/python.casa" ] && git clone git@github.com:janikvonrotz/python.casa.git ~/python.casa
    [ ! -d "$HOME/encrypt.casa" ] && git clone git@github.com:janikvonrotz/encrypt.casa.git ~/encrypt.casa
    [ ! -d "$HOME/.password-store" ] && git clone git@gitlab.com:janikvonrotz/pass.git ~/.password-store
}

function setup-mint-system() {
    echo "Pull Mint-System repos."
    [ ! -d "$HOME/Odoo-Build" ] && git clone git@github.com:Mint-System/Odoo-Build.git ~/Odoo-Build
    [ ! -d "$HOME/Odoo-Wiki" ] && git clone git@github.com:Mint-System/Odoo-Wiki.git ~/Odoo-Wiki
    [ ! -d "$HOME/Ansible-Build" ] && git clone git@github.com:Mint-System/Ansible-Build.git ~/Ansible-Build
    [ ! -d "$HOME/Ansible-Build/inventories" ] && git clone git@gitlab.com:Mint-System/Ansible-Inventories.git ~/Ansible-Build/inventories
    [ ! -d "$HOME/Wiki" ] && git clone git@github.com:Mint-System/Wiki.git ~/Wiki
    [ ! -d "$HOME/Website" ] && git clone git@github.com:Mint-System/Website.git ~/Website
    [ ! -d "$HOME/VarLog" ] && git clone git@github.com:Mint-System/VarLog.git ~/VarLog
    [ ! -d "$HOME/Jenkins-Build" ] && git clone git@github.com:Mint-System/Jenkins-Build.git ~/Jenkins-Build
    [ ! -d "$HOME/Nextcloud-Build" ] && git clone git@github.com:Mint-System/Nextcloud-Build.git ~/Nextcloud-Build
}

function setup-sozialinfo() {
    echo "Pull Sozialinfo repos."
    [ ! -d "$HOME/Sozialinfo-Odoo-Build" ] && git clone git@github.com:Sozialinfo/Odoo-Build.git ~/Sozialinfo-Odoo-Build
    [ ! -d "$HOME/documentation" ] && git clone git@github.com:Sozialinfo/documentation.git ~/documentation
    [ ! -d "$HOME/Odoo-CD" ] && git clone git@github.com:Sozialinfo/Odoo-CD.git ~/Odoo-CD
    [ ! -d "$HOME/Odoo-CI" ] && git clone git@github.com:Sozialinfo/Odoo-CI.git ~/Odoo-CI
    [ ! -d "$HOME/Keycloak-CD" ] && git clone git@github.com:Sozialinfo/Keycloak-CD.git ~/Keycloak-CD
    [ ! -d "$HOME/sozialinfo-e2e" ] && git clone git@github.com:sozialinfo/sozialinfo-e2e.git ~/sozialinfo-e2e
    [ ! -d "$HOME/frontend" ] && git clone git@github.com:sozialinfo/frontend.git ~/frontend
}

function setup-appuio() {
    echo "Install OpenShift cli."
    wcurl "https://downloads-openshift-console.apps.exoscale-ch-gva-2-0.appuio.cloud/amd64/linux/oc.tar"
    tar -xf oc.tar
    rm oc.tar
    mv oc ~/bin/oc

    echo "Get the login command of the 'exoscale-ch-gva-2-0' zone: https://oauth-openshift.apps.exoscale-ch-gva-2-0.appuio.cloud/oauth/token/display"
}

if declare -f "$1" > /dev/null; then
    "$1" "${@:2}"
else
    echo "Unknown command: $1"
    help
    exit 1
fi
