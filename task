#!/bin/bash

set -eo pipefail

# load env vars
if [ -f .env ]; then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

function help-table() {
    CMD_WIDTH=24
    OPT_WIDTH=10
    DESC_WIDTH=60
    COLUMN="| %-${CMD_WIDTH}s | %-${OPT_WIDTH}s | %-${DESC_WIDTH}s |\n"

    printf "$COLUMN" "Command" "Option" "Description"
    echo "|$(printf '%*s' $((CMD_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((OPT_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((DESC_WIDTH + 2)) '' | tr ' ' '-')|"
    printf "$COLUMN" "backup-thunderbird" "[path]" "Backup Thunderbird profile files."
    printf "$COLUMN" "backup-librewolf" "[path]" "Backup LibreWolf profile files."
    printf "$COLUMN" "commit-with-llm" "" "Commit with llm generated commit message."
    printf "$COLUMN" "enable-passwordless-sudo" "" "Get sudoers entry for passwordless sudo."
    printf "$COLUMN" "init-venv" "" "Initialize the Python venv with uv."
    printf "$COLUMN" "install" "[name]" "Install a package."
    printf "$COLUMN" "list" "[grep]" "List all available packages."
    printf "$COLUMN" "restore-thunderbird" "[path]" "Restore Thunderbird profile from backup."
    printf "$COLUMN" "restore-librewolf" "[path]" "Restore LibreWolf from backup."
    printf "$COLUMN" "run-open-webui" "" "Run Open WebUI."
    printf "$COLUMN" "set-git-origin" "" "Change git origin to ssh."
    printf "$COLUMN" "setup-appuio" "" "Install and setup APPUiO OpenShift cli."
    printf "$COLUMN" "setup-gnome-autostart" "" "Copy autostart folder."
    printf "$COLUMN" "setup-mint-system" "" "Clone Mint System git repos."
    printf "$COLUMN" "setup-private" "" "Clone private git repos."
    printf "$COLUMN" "setup-sozialinfo" "" "Clone Sozialinfo git repos."
    printf "$COLUMN" "setup-steamdeck" "" "Setup steamdeck os."
    printf "$COLUMN" "uninstall" "[name]" "Uninstall a package."
    printf "$COLUMN" "version" "" "Show version of installed tools."
}

function help() {
    echo
    if [ -n "$1" ]; then
        help-table | grep -i "$1" | column -t -s'|'
    else
        echo "task <command> [options]"
        echo
        echo "commands:"
        echo
        help-table
    fi
    echo
}

# Dynamic env vars

GIT_BRANCH=$(git symbolic-ref --short -q HEAD)

if command -v pacman >/dev/null 2>&1; then
    export PACKAGE_MANAGER="pacman"
elif command -v apt >/dev/null 2>&1; then
    export PACKAGE_MANAGER="apt"
elif command -v dnf >/dev/null 2>&1; then
    export PACKAGE_MANAGER="dnf"
else
    export PACKAGE_MANAGER="unknown"
fi

# Import commands

if [ -d "$HOME/taskfile.build/bin" ]; then
    for file in "$HOME/taskfile.build/bin/"*; do
        if [ -f "$file" ]; then
            source "$file"
        fi
    done
fi

# Env commands

function version() {
    uv --version
    docker --version
    docker-compose --version
}

function set-git-origin(){
    echo "Change git origin."
    git remote set-url origin git@github.com:janikvonrotz/dotfiles.git
}

# Config commands

function enable-passwordless-sudo() {
    echo "Add user $USER to sudoers file."
    sudo sh -c "echo \"$USER	ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/nopasswd"
}

# Package commands

function list() {
    function list-table() {
        CMD_WIDTH=14
        OPT_WIDTH=40
        COLUMN="| %-${CMD_WIDTH}s | %-${OPT_WIDTH}s |\n"

        printf "$COLUMN" "Name" "Description"
        echo "|$(printf '%*s' $((CMD_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((OPT_WIDTH + 2)) '' | tr ' ' '-')|"
        printf "$COLUMN" "bash" "Configure bash."
        printf "$COLUMN" "betterbird" "Install Betterbird."
        printf "$COLUMN" "bruno" "Install Rust."
        printf "$COLUMN" "buildkit" "Install buildkit cli."
        printf "$COLUMN" "docker" "Install Docker."
        printf "$COLUMN" "element" "Install Element."
        printf "$COLUMN" "exo" "Install Exoscale cli."
        printf "$COLUMN" "fish" "Install fish shell."
        printf "$COLUMN" "firefox" "Install Firefox browser."
        printf "$COLUMN" "flatpak" "Install flatpak."
        printf "$COLUMN" "fzf" "Install fzf."
        printf "$COLUMN" "gh" "Install GitHub cli."
        printf "$COLUMN" "git" "Configure git."
        printf "$COLUMN" "gnupg" "Install GnuPG."
        printf "$COLUMN" "helm" "Install Helm."
        printf "$COLUMN" "helix" "Install helix editor."
        printf "$COLUMN" "kate" "Install Kate IDE."
        printf "$COLUMN" "kde" "Install KDE desktop environment."
        printf "$COLUMN" "k9s" "Install k9s."
        printf "$COLUMN" "keepass" "Install KeepassXC."
        printf "$COLUMN" "kind" "Install kind."
        printf "$COLUMN" "kubectl" "Install kubectl."
        printf "$COLUMN" "kubeseal" "Install kubeseal."
        printf "$COLUMN" "librewolf" "Install LibreWolf."
        printf "$COLUMN" "libreoffice" "Intall LibreOffice."
        printf "$COLUMN" "llm" "Intall LLM cli."
        printf "$COLUMN" "minikube" "Install kubectl and minikube."
        printf "$COLUMN" "nextcloud" "Install Nextcloud Desktop."
        printf "$COLUMN" "nvim" "Install neovim and configure plugins."
        printf "$COLUMN" "obsidian" "Install Obsidian."
        printf "$COLUMN" "ollama" "Intall Ollama cli."
        printf "$COLUMN" "pass" "Install and configure pass."
        printf "$COLUMN" "pnpm" "Install pnpm."
        printf "$COLUMN" "podman" "Install podman."
        printf "$COLUMN" "python" "Install Python."
        printf "$COLUMN" "qemu" "Install QUEMU."
        printf "$COLUMN" "rust" "Install Rust."
        printf "$COLUMN" "scripts" "Install bash scripts."
        printf "$COLUMN" "snapd" "Uninstall snapd."
        printf "$COLUMN" "ssh" "Install SSH agent."
        printf "$COLUMN" "signal" "Install Signal desktop client."
        printf "$COLUMN" "sublime" "Install and configure Sublime IDE."
        printf "$COLUMN" "threema" "Install Threema desktop client."
        printf "$COLUMN" "thunderbird" "Install Thunderbird."
        printf "$COLUMN" "tools" "Install requirements for this project."
        printf "$COLUMN" "tmux" "Install tmux."
        printf "$COLUMN" "tuba" "Install Tuba fediverse client."
        printf "$COLUMN" "vscodium" "Install VSCodium."
        printf "$COLUMN" "vim" "Install vim and configure plugins."
        printf "$COLUMN" "yay" "Install Yet another Yogurt."
        printf "$COLUMN" "zed" "Install Zed IDE."
        printf "$COLUMN" "zsh" "Install zsh shell and oh-my-zsh."
    }

    echo
    if [ -n "$1" ]; then
        list-table | grep -i "$1" | column -t -s'|'
    else
        list-table
    fi
    echo
}

# Install commands

function install() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi
    COMMAND="install-$1"
    $COMMAND
}

function install-ssh() {
    echo "Copy SSH config file"
    mkdir -p ~/.ssh/
    cp ./ssh/config ~/.ssh/

    if [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm gnome-keyring
        systemctl --user enable gcr-ssh-agent.socket
        systemctl --user start gcr-ssh-agent.socket
    fi
}

function install-kde() {
    echo "Install KDE."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y  kde-standard
    fi

    echo "To select new environment reboot or run: sudo systemctl restart gdm"
}

function install-tuba() {
    echo "Install Tuba."
    flatpak install -y Tuba
}

function install-gnupg() {
    echo "Install GnuPG."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt-get install gnupg dirmngr
        sudo mkdir -p /root/.gnupg
        sudo chmod 700 /root/.gnupg
    fi
}

function install-bruno() {
    echo "Install Bruno."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo mkdir -p /etc/apt/keyrings
        sudo gpg --no-default-keyring --keyring /etc/apt/keyrings/bruno.gpg --keyserver keyserver.ubuntu.com --recv-keys 9FA6017ECABE0266
        echo "deb [signed-by=/etc/apt/keyrings/bruno.gpg] http://debian.usebruno.com/ bruno stable" | sudo tee /etc/apt/sources.list.d/bruno.list
        sudo apt update
        sudo apt install -y  bruno
    fi
}

function install-libreoffice() {
    echo "Install LibreOffice"
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y libreoffice
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y libreoffice
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm libreoffice
    fi
}

function install-tools() {
    echo "Install cli tools."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y jq btop wl-clipboard ripgrep bat swaks dnsutils keychain pwgen rsync crudini
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y jq btop wl-clipboard ripgrep bat swaks dnsutils keychain pwgen rsync crudini
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm jq btop ripgrep bat swaks dnsutils keychain pwgen rsync wget less
        if [ "$XDG_SESSION_TYPE" == "wayland" ]; then
            sudo pacman -S --noconfirm wl-clipboard
        elif [ "$XDG_SESSION_TYPE" == "x11" ]; then
            sudo pacman -S --noconfirm xclip
        fi
        yay -S crudini
    fi

    echo "Install yq."
    sudo wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O /usr/bin/yq &&\
    sudo chmod +x /usr/bin/yq

    echo "Install wcurl."
    curl -fLO https://raw.githubusercontent.com/curl/wcurl/main/wcurl
    chmod +x wcurl && sudo mv wcurl /usr/local/bin/wcurl
}

function install-thunderbird() {
    echo "Install Thunderbird."

    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        echo "Adding Mozilla Team PPA."
        sudo add-apt-repository ppa:mozillateam/ppa

        echo "Prioritizing apt version of Thunderbird..."
        echo '
Package: *
Pin: release o=LP-PPA-mozillateam
Pin-Priority: 1001

Package: thunderbird
Pin: version 2:1snap*
Pin-Priority: -1
' | sudo tee /etc/apt/preferences.d/thunderbird

        echo "Installing Thunderbird using apt."
        sudo apt update && sudo apt install -y thunderbird
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y thunderbird
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm thunderbird
    fi
}

function install-betterbird() {
    echo "Install Betterbird."
    wget -N --trust-server-names -O betterbird.tar.bz2 "https://www.betterbird.eu/downloads/get.php?os=linux&lang=en-US&version=release"
    tar -xjf betterbird.tar.bz2
    rm betterbird.tar.bz2
    sudo rm -rf /opt/betterbird
    sudo mv ./betterbird /opt/
    sudo ln -s /opt/betterbird/betterbird-bin /usr/local/bin/betterbird

    # Create a desktop shortcut
    echo "[Desktop Entry]" > ~/.local/share/applications/betterbird.desktop
    echo "Type=Application" >> ~/.local/share/applications/betterbird.desktop
    echo "Name=BetterBird" >> ~/.local/share/applications/betterbird.desktop
    echo "Comment=A fork of Thunderbird" >> ~/.local/share/applications/betterbird.desktop
    echo "Exec=betterbird" >> ~/.local/share/applications/betterbird.desktop
    echo "Icon=/opt/betterbird/chrome/icons/default/default48.png" >> ~/.local/share/applications/betterbird.desktop
    echo "Terminal=false" >> ~/.local/share/applications/betterbird.desktop
    echo "Categories=Network;Email;" >> ~/.local/share/applications/betterbird.desktop
    chmod +x ~/.local/share/applications/betterbird.desktop

    # Reload the desktop
    xdg-desktop-menu forceupdate
    update-desktop-database ~/.local/share/applications/
}

function install-element() {
    echo "Install Element"
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y wget apt-transport-https
        sudo wget -O /usr/share/keyrings/element-io-archive-keyring.gpg https://packages.element.io/debian/element-io-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/element-io-archive-keyring.gpg] https://packages.element.io/debian/ default main" | sudo tee /etc/apt/sources.list.d/element-io.list
        sudo apt update

        sudo apt install element-desktop
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y dnf-plugins-core distribution-gpg-keys
        sudo dnf copr enable taw/element
        sudo dnf install -y element --refresh
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -Sy element-desktop
    fi
}

function install-keepass() {
    echo "Install KeepassXC."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo add-apt-repository ppa:phoerious/keepassxc
        sudo apt update && sudo apt install -y keepassxc
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y keepassxc
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        flatpak install --user flathub org.keepassxc.KeePassXC
    fi

}

function install-nextcloud() {
    echo "Install Nextcloud Desktop."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo add-apt-repository ppa:xtradeb/apps
        sudo apt update && sudo apt install -y nextcloud-desktop
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y nextcloud-client
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman  -S --noconfirm nextcloud-client
    fi
}

install-firefox() {
    if [[ "$(lsb_release -is 2>/dev/null)" = "Ubuntu" ]]; then
        echo "Adding Mozilla Team PPA..."
        sudo add-apt-repository -y ppa:mozillateam/ppa
        sudo apt update

        echo "Pinning APT to prefer mozillateam PPA over Snap..."
        cat <<EOF | sudo tee /etc/apt/preferences.d/firefox-no-snap > /dev/null
Package: firefox*
Pin: release o=LP-PPA-mozillateam
Pin-Priority: 501
EOF
    fi

    echo "Installing Firefox."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y firefox
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman  -S --noconfirm firefox
    fi
}

function install-librewolf() {
    echo "Install LibreWolf."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt update && sudo apt install -y extrepo
        sudo extrepo enable librewolf
        sudo apt update && sudo apt install -y librewolf
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        curl -fsSL https://repo.librewolf.net/librewolf.repo | pkexec tee /etc/yum.repos.d/librewolf.repo
        sudo dnf install -y librewolf
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        yay -S librewolf
    fi

    echo "Ensure LibreWolf works with KeepassXC extension."
    mkdir -p "$HOME/.librewolf/"
    ln -s "$HOME/.mozilla/native-messaging-hosts" "$HOME/.librewolf/native-messaging-hosts"
}

function install-sublime() {
    echo "Install Sublime."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null
        echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
        sudo apt update
        sudo apt install sublime-text
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
    	curl -O https://download.sublimetext.com/sublimehq-pub.gpg && sudo pacman-key --add sublimehq-pub.gpg && sudo pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
    	echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" | sudo tee -a /etc/pacman.conf
        sudo pacman -Sy --noconfirm sublime-text
    fi

    echo "Copy sublime keybindings."
    cp "sublime/Default (Linux).sublime-keymap" ~/.config/sublime-text/Packages/User/

    echo "Link sublime binary."
    sudo ln -s /opt/sublime_text/sublime_text /usr/local/bin/subl
}

function install-kate() {
    echo "Install Kate."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo add-apt-repository ppa:kubuntu-ppa/backports
        sudo apt update
        sudo apt install -y kate
    fi
}

function install-zed(){
    echo "Install Zed."

    if [ "$PACKAGE_MANAGER" == "pacman" ]; then
	sudo pacman -S vulkan-icd-loader vulkan-validation-layers vulkan-tools
    fi
    curl -f https://zed.dev/install.sh | sh

    echo "Copy settings file."
    mkdir -p "$HOME/.config/zed"
    cp ./zed/settings.json "$HOME/.config/zed/settings.json"
}

function install-obsidian() {
    echo "Install Obsidian."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        # wcurl "https://github.com/obsidianmd/obsidian-releases/releases/download/v$RELEASE/obsidian_${RELEASE}_amd64.deb"
        wcurl "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.8.9/obsidian_1.8.9_amd64.deb"
        sudo apt install -y "./obsidian_1.8.9_amd64.deb"
        rm "obsidian_1.8.9_amd64.deb"
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo flatpak install -y md.obsidian.Obsidian
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman  -S --noconfirm obsidian
    fi
}

function install-docker() {
    echo "Install Docker."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        # https://docs.docker.com/engine/install/debian/

        # Add Docker's official GPG key:
        sudo apt update
        sudo apt install -y ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        # Add the repository to Apt sources:
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update

        sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm docker containerd docker-buildx docker-compose
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        # https://docs.docker.com/engine/install/fedora/
        sudo dnf -y install dnf-plugins-core
        sudo dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

        sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    fi

    echo "Start Docker service."
    sudo systemctl enable --now docker

    echo  "Add current user to docker group."
    sudo usermod -aG docker $USER
    newgrp docker

    echo  "Verify docker installation."
    docker run hello-world
}

function install-flatpak() {
    echo "Install flatpak."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y flatpak
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    fi
}

function install-buildkit()  {
    echo "Install buildkit."
    wcurl https://github.com/moby/buildkit/releases/download/v0.22.0/buildkit-v0.22.0.linux-amd64.tar.gz -o tmp/buildkit.tar.gz
    mkdir -p tmp/buildkit
    tar -xvf tmp/buildkit.tar.gz -C tmp/buildkit
    sudo mv tmp/buildkit/bin/* /usr/local/bin
    rm -rf tmp/buildkit
    rm tmp/buildkit.tar.gz
}

function install-qemu() {
    echo "Install QEMU."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y qemu qemu-user-static binfmt-support
    fi

    echo "Copy docker config."
    sudo cp docker/daemon.json /etc/docker
    sudo systemctl restart docker
}

function install-fzf() {
    echo "Install fzf."
    [ ! -d "$HOME/.fzf" ] &&  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    yes | ~/.fzf/install
}

function install-podman() {
    echo "Install podman."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y podman
    fi

    echo "Add docker.io to search registry"
    sudo grep -qxF 'unqualified-search-registries = ["docker.io"]' /etc/containers/registries.conf || echo 'unqualified-search-registries = ["docker.io"]' | sudo tee -a /etc/containers/registries.conf
}

function install-kubectl() {
    echo "Install kubectl."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        # https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
        sudo apt update && sudo apt install -y kubectl
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm kubectl
        sudo pacman -S --noconfirm kubectx
    fi
}

function install-k9s() {
    if [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm k9s
    fi
}

function install-kubeseal() {
    # Fetch the latest sealed-secrets version using GitHub API
    KUBESEAL_VERSION=$(curl -s https://api.github.com/repos/bitnami-labs/sealed-secrets/tags | jq -r '.[0].name' | cut -c 2-)

    # Check if the version was fetched successfully
    if [ -z "$KUBESEAL_VERSION" ]; then
        echo "Failed to fetch the latest KUBESEAL_VERSION"
        exit 1
    fi

    curl -OL "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION}/kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz"
    tar -xvzf kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz kubeseal
    sudo install -m 755 kubeseal /usr/local/bin/kubeseal
    rm kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz
    rm kubeseal
}

function install-kind() {
    echo "Install kind."
    # https://kind.sigs.k8s.io/docs/user/quick-start/#installation
    # For AMD64 / x86_64
    [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
    # For ARM64
    [ $(uname -m) = aarch64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-arm64
    chmod +x ./kind
    sudo mv ./kind /usr/local/bin/kind
}

function install-llm() {
    echo "Install LLM."
    uv tool install llm

    echo "Copy extra openapi models config."
    cp "llm/extra-openai-models.yaml" "$(dirname $(llm logs path))/extra-openai-models.yaml"

    echo "Set infomaniak api key."
    llm keys set infomaniak --value "$(pass show env/llm_key_infomaniak)"

    echo "Set llama as default model."
    llm models default llama
}

function install-ollama() {
    echo "Install Ollama."
    curl -fsSL https://ollama.com/install.sh | sh
}

function install-threema() {
    echo "Install Threema."
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    flatpak install -y --from https://releases.threema.ch/flatpak/threema-desktop/ch.threema.threema-desktop.flatpakref
}

function install-signal() {
    echo "Install Signal."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        # https://signal.org/download/#
        wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg;
        cat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null
        echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
        sudo tee /etc/apt/sources.list.d/signal-xenial.list
        sudo apt update && sudo apt install -y  signal-desktop
        rm signal-desktop-keyring.gpg
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
	sudo pacman -S --noconfirm signal-desktop
    fi
}

function install-exo() {
    echo "Install exo."
    curl -fsSL https://raw.githubusercontent.com/exoscale/cli/master/install-latest.sh | sh
}

function install-minikube() {
    echo "Install minikube."
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
}

function install-vscodium() {
    echo "Install VSCodium."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
            | gpg --dearmor \
            | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg
        echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] https://download.vscodium.com/debs vscodium main' \
            | sudo tee /etc/apt/sources.list.d/vscodium.list
        sudo apt update && sudo apt install -y codium
    fi
}

function install-python() {
    echo "Install uv."
    curl -LsSf https://astral.sh/uv/install.sh | sh
}

function install-pnpm() {
    echo "Install pnpm."
    curl -fsSL https://get.pnpm.io/install.sh | sh -

    echo "Run this command to install Node for your project:"
    echo "pnpm install add global lts"
}

function install-pass() {
    echo "Install pass."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y pass pass-extension-otp
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm pass pass-otp
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y pass pass-otp
    fi

    echo "Clone pass repo."
    [ ! -d "$HOME/.password-store" ] && git clone git@gitlab.com:janikvonrotz/pass.git ~/.password-store

    echo "Import gpg key with this command."
    echo "gpg --import /path/to/user@example.com.private.gpg"
}

function install-scripts() {
    echo "Copy bin/* to $HOME/.local/bin/"
    mkdir -p "$HOME/.local/bin/"
    sudo cp -r bin/* "$HOME/.local/bin/"

    echo "Download review script by Bill Mill."
    wget https://raw.githubusercontent.com/llimllib/personal_code/refs/heads/master/homedir/.local/bin/review -O "$HOME/.local/bin/review"
    chmod +x "$HOME/.local/bin/review"
}

function install-tmux() {

    echo "Install tmux."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y tmux
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm tmux
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y tmux
    fi

    echo "Install tmux plugins."
    [ ! -d "$HOME/.tmux" ] && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    echo "Copy tmux config."
    cp tmux/.tmux.conf ~

    echo "Source tmux config."
    tmux source ~/.tmux.conf

    echo "Open tmux and install plugins with: ctrl + b; shift + i"
}

function install-fish() {
    echo "Install fish."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y fish
    fi

    mkdir -p ~/.config/fish/completions

    echo "Copy fish config."
    cp fish/config.fish ~/.config/fish/config.fish

    echo "Copy fish completions."
    cp fish/completions/* ~/.config/fish/completions/
}

function install-vim() {
    echo "Install vim."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y vim
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm vim
    fi

    echo "Copy vimrc config."
    cp vim/.vimrc ~

    echo "Install vim plugins"
    vim -c ":PlugInstall"
}

function install-helix() {
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        echo "Add helix ppa."
        sudo add-apt-repository ppa:maveonair/helix-editor
        sudo apt update

        echo "Install helix."
        sudo apt install -y helix
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y helix
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm helix
    fi

    echo "Copy vim keybindings."
    mkdir -p ~/.config/helix/
    cp helix/config.toml ~/.config/helix/config.toml
}

function install-helm() {
    echo  "Install Helm."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt update
        sudo apt install -y  helm
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm helm
    fi
}

function install-nvim() {
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        echo "Add neovim ppa."
        sudo add-apt-repository ppa:neovim-ppa/stable -y
        sudo apt update

        echo "Install neovim."
        sudo apt install -y neovim
    fi
}

function install-bash() {
    if [ "$PACKAGE_MANAGER" == "pacman" ]; then
        echo "Install bash completion."
        sudo pacman -S --noconfirm bash-completion
    fi

    echo "Copy bash completions."
    sudo cp bash/completions/* /etc/bash_completion.d/

    echo "Copy bash aliases."
    sudo cp bash/.bash_aliases ~/.bash_aliases

    echo "Append bash runtime configuration."
    START_MARKER="# dotenv"
    END_MARKER="# dotenv end"
    sed -i "/$START_MARKER/,/$END_MARKER/d" ~/.bashrc
    {
        echo -e "\n$START_MARKER"
        cat bash/.bashrc
        echo -e "\n$END_MARKER"
    } >> ~/.bashrc
}

function install-zsh() {
    echo "Install zsh."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt install -y zsh
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm zsh
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install -y zsh
    fi

    echo "Reset zsh."
    ZSH=

    echo "Remove oh-my-zsh folder."
    rm -rf ~/.oh-my-zsh

    echo "Set zsh custom."
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    cd ~

    echo "Install oh-my-zsh"
    curl -L https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh

    echo "Clone zsh autosuggestions."
    [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ] && git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"

    echo "Copy zsh customizations."
    cp ~/dotfiles/zsh/custom/*.zsh ~/.oh-my-zsh/custom

    echo "Copy zsh completions."
    cp -r ~/dotfiles/zsh/completions ~/.oh-my-zsh/completions

    echo "Set plugins list for zshrc."
    sed -i'' 's/plugins=.*/plugins=(ansible docker fzf git helm kubectl minikube podman)/g' ~/.zshrc

    echo "Set zsh default theme."
    sed -i'' 's/ZSH_THEME.*/ZSH_THEME="eastwood"/g' ~/.zshrc
}

function install-git() {
    echo "Copy git config."
    cp git/.gitconfig ~
}

function install-gh() {
    echo "Install GitHub cli."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        (type -p wget >/dev/null || (sudo apt update && sudo apt install -y wget)) \
            && sudo mkdir -p -m 755 /etc/apt/keyrings \
                && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
                && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
            && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install -y gh
    elif [ "$PACKAGE_MANAGER" == "dnf" ]; then
        sudo dnf install dnf5-plugins
        sudo dnf config-manager addrepo --from-repofile=https://cli.github.com/packages/rpm/gh-cli.repo
        sudo dnf install -y gh --repo gh-cli
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -S --noconfirm github-cli
    fi
}

function install-yay() {
    if [ "$PACKAGE_MANAGER" == "pacman" ]; then
        echo "Install Yet another Yogurt."
        sudo pacman -S --needed git base-devel && git clone https://aur.archlinux.org/yay-bin.git && cd yay-bin && makepkg -si
        rm -rf yay-bin
    fi
}

# Uninstall commands

function uninstall() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi
    COMMAND="uninstall-$1"
    $COMMAND
}

function uninstall-vscodium() {
    echo "Uninstall VSCodium."
    sudo apt remove codium
}

function uninstall-docker() {
    echo "Show install docker apps."
    dpkg -l | grep -i docker

    echo "Unistall Docker."

    sudo apt purge -y docker-engine docker docker.io docker-ce docker-ce-cli docker-compose-plugin
    sudo apt autoremove -y --purge docker-engine docker docker.io docker-ce docker-compose-plugin

    sudo rm -rf /var/lib/docker /etc/docker
    sudo rm /etc/apparmor.d/docker
    sudo groupdel docker
    sudo rm -rf /var/run/docker.sock
    sudo rm -rf /var/lib/containerd
}

function uninstall-obsidian() {
    echo "Uninstall Obsidian."
    sudo apt remove -y obisidan
}

function uninstall-snapd() {
    echo "Uninstall snapd"
    sudo apt autoremove --purge snapd
    sudo apt-mark hold snapd
}

function uninstall-sublime() {
    echo "Uninstall Sublime."
    if [ "$PACKAGE_MANAGER" == "apt" ]; then
        sudo apt remove sublime-text
    elif [ "$PACKAGE_MANAGER" == "pacman" ]; then
        sudo pacman -R sublime-text
    fi
}

# Run commands

function run-open-webui() {
    DATA_DIR=~/.open-webui uvx --python 3.11 open-webui@latest serve
}

# Setup commands

function setup-steamdeck() {
    echo "If you have not already, use 'passwd' to create a password for the deck user."

    echo "Disable read-only mode."
    sudo steamos-readonly disable

    echo "Initialize the pacman keyring."
    sudo pacman-key --init

    echo "Populate the pacman keyring with the default Arch Linux keys."
    sudo pacman-key --populate archlinux holo
}

function setup-private() {
    echo "Pull janikvonrotz repos."
    [ ! -d "$HOME/taskfile.build" ] && git clone git@github.com:janikvonrotz/taskfile.build.git ~/taskfile.build
    [ ! -d "$HOME/knowledge" ] && git clone git@gitlab.com:janikvonrotz/knowledge.git ~/knowledge
    [ ! -d "$HOME/janikvonrotz.ch" ] && git clone git@github.com:janikvonrotz/janikvonrotz.ch.git ~/janikvonrotz.ch
    [ ! -d "$HOME/python.casa" ] && git clone git@github.com:janikvonrotz/python.casa.git ~/python.casa
    [ ! -d "$HOME/encrypt.casa" ] && git clone git@github.com:janikvonrotz/encrypt.casa.git ~/encrypt.casa
    [ ! -d "$HOME/.password-store" ] && git clone git@gitlab.com:janikvonrotz/pass.git ~/.password-store
}

function setup-mint-system() {
    echo "Pull Mint-System repos."
    [ ! -d "$HOME/Odoo-Build" ] && git clone git@github.com:Mint-System/Odoo-Build.git ~/Odoo-Build
    [ ! -d "$HOME/Odoo-Wiki" ] && git clone git@github.com:Mint-System/Odoo-Wiki.git ~/Odoo-Wiki
    [ ! -d "$HOME/Ansible-Build" ] && git clone git@github.com:Mint-System/Ansible-Build.git ~/Ansible-Build
    [ ! -d "$HOME/Ansible-Build/inventories" ] && git clone git@gitlab.com:Mint-System/Ansible-Inventories.git ~/Ansible-Build/inventories
    [ ! -d "$HOME/Wiki" ] && git clone git@github.com:Mint-System/Wiki.git ~/Wiki
    [ ! -d "$HOME/Website" ] && git clone git@github.com:Mint-System/Website.git ~/Website
    [ ! -d "$HOME/VarLog" ] && git clone git@github.com:Mint-System/VarLog.git ~/VarLog
    [ ! -d "$HOME/Jenkins-Build" ] && git clone git@github.com:Mint-System/Jenkins-Build.git ~/Jenkins-Build
    [ ! -d "$HOME/Nextcloud-Build" ] && git clone git@github.com:Mint-System/Nextcloud-Build.git ~/Nextcloud-Build
    [ ! -d "$HOME/Kubernetes-Build" ] && git clone git@github.com:Mint-System/Kubernetes-Build.git ~/Kubernetes-Build
}

function setup-sozialinfo() {
    echo "Pull Sozialinfo repos."
    [ ! -d "$HOME/Sozialinfo-Odoo-Build" ] && git clone git@github.com:Sozialinfo/Odoo-Build.git ~/Sozialinfo-Odoo-Build
    [ ! -d "$HOME/documentation" ] && git clone git@github.com:Sozialinfo/documentation.git ~/documentation
    [ ! -d "$HOME/Odoo-CD" ] && git clone git@github.com:Sozialinfo/Odoo-CD.git ~/Odoo-CD
    [ ! -d "$HOME/Keycloak-CD" ] && git clone git@github.com:Sozialinfo/Keycloak-CD.git ~/Keycloak-CD
    [ ! -d "$HOME/sozialinfo-e2e" ] && git clone git@github.com:sozialinfo/sozialinfo-e2e.git ~/sozialinfo-e2e
    [ ! -d "$HOME/frontend" ] && git clone git@github.com:sozialinfo/frontend.git ~/frontend
    [ ! -d "$HOME/bruno" ] && git clone git@github.com:sozialinfo/bruno.git ~/bruno
    [ ! -d "$HOME/gitops" ] && git clone git@github.com:sozialinfo/gitops.git ~/gitops
}

function setup-appuio() {
    echo "Install OpenShift cli."
    wcurl "https://downloads-openshift-console.apps.exoscale-ch-gva-2-0.appuio.cloud/amd64/linux/oc.tar"
    tar -xf oc.tar
    rm oc.tar
    mv oc ~/bin/oc

    echo "Get the login command of the 'exoscale-ch-gva-2-0' zone: https://oauth-openshift.apps.exoscale-ch-gva-2-0.appuio.cloud/oauth/token/display"
}

function setup-gnome-autostart() {
    echo "Copy autostart folder."
    cp -r autostart "$HOME/.config"
}

# Application commands

function backup-thunderbird() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi

    PROFILE=$(crudini --get ~/.thunderbird/profiles.ini Profile0 Path)
    echo "Backup Thunderbird profile $PROFILE."
    PROFILE_DIR="$HOME/.thunderbird/$PROFILE"
    tar -czvf "$1/thunderbird_profile_${PROFILE//\//_}.tar.gz" -C "$PROFILE_DIR" .
}

function backup-librewolf() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi

    PROFILE=$(crudini --get ~/.librewolf/profiles.ini Profile0 Path)
    echo "Backup LibreWolf profile $PROFILE."
    PROFILE_DIR="$HOME/.librewolf/$PROFILE"
    tar -czvf "$1/librewolfd_profile_${PROFILE//\//_}.tar.gz" -C "$PROFILE_DIR" .
}

function restore-thunderbird() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi

    PROFILE=$(crudini --get ~/.thunderbird/profiles.ini Profile1 Path)
    echo "Restore Thunderbird $1 to profile $PROFILE."
    PROFILE_DIR="$HOME/.thunderbird/$PROFILE"
    rm -rf "$PROFILE_DIR"/*
    tar -xzvkf "$1" --strip-components=1 -C "$PROFILE_DIR"
    echo "Open Thunderbird and run 'Tools > Import > Import from another Thunderbird installation'."
    echo "Install 'Owl for Exchange': https://addons.thunderbird.net/en-US/thunderbird/addon/owl-for-exchange/"
}

function restore-librewolf() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi

    PROFILE=$(crudini --get ~/.librewolf/profiles.ini Profile1 Path)
    echo "Restore LibreWolf $1 to profile $PROFILE."
    PROFILE_DIR="$HOME/.librewolf/$PROFILE"
    rm -rf "$PROFILE_DIR"/*
    tar -xzvkf "$1" --strip-components=1 -C "$PROFILE_DIR"
}

if declare -f "$1" > /dev/null; then
    "$1" "${@:2}"
else
    echo "Unknown command: $1"
    help
    exit 1
fi
