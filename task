#!/bin/bash

set -eo pipefail

# load env vars
if [ -f .env ]; then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

function help() {
    echo
    echo "$1 <command> [options]"
    echo
    echo "commands:"
    echo

cmd_width=24
opt_width=10
desc_width=60
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "Command" "Option" "Description"
echo "|$(printf '%*s' $((cmd_width + 2)) '' | tr ' ' '-')|$(printf '%*s' $((opt_width + 2)) '' | tr ' ' '-')|$(printf '%*s' $((desc_width + 2)) '' | tr ' ' '-')|"
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "enable-passwordless-sudo" "" "Get sudoers entry for passwordless sudo."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-desktop" "" "Install desktop tools."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-dev-tools" "" "Install rust, python, node version manager and tools."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-docker" "" "Install Docker."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-kind" "" "Install kubectl and kind."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-minikube" "" "Install kubectl and minikube."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-tmux" "" "Install tmux."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-vim" "" "Install vim and configure plugins."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-helix" "" "Install helix editor."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-nvim" "" "Install neovim and configure plugins."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-bash" "" "Configure bash."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-zsh" "" "Install zsh shell and oh-my-zsh."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-fish" "" "Install fish shell."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-git" "" "Configure git."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-pass" "" "Install and configure pass."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "install-zsh-theme" "" "Install zsh theme of choice."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "setup-work" "" "Clone work related git repos."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "setup-private" "" "Clone private git repos."
printf "| %-${cmd_width}s | %-${opt_width}s | %-${desc_width}s |\n" "update-pyenv" "" "Update pyenv."

    echo
}

function enable-passwordless-sudo() {
    echo "Add user $USER to sudoers file."
    echo "$USER	ALL=(ALL) NOPASSWD: ALL" | sudo sh -c "cat >> /etc/sudoers.d/nopasswd"
}

function install-desktop() {
    echo "Install wcurl."
    curl -fLO https://raw.githubusercontent.com/curl/wcurl/main/wcurl
    chmod +x wcurl && sudo mv wcurl /usr/local/bin/wcurl

    echo "Install thunderbird, firefox."
    sudo apt install -y thunderbird firefox

    echo "Install KeepassXC."
    sudo add-apt-repository ppa:phoerious/keepassxc
    sudo apt update && sudo apt install -y keepassxc

    echo "Install Nextcloud Desktop."
    sudo add-apt-repository ppa:xtradeb/apps
    sudo apt update && sudo apt install -y nextcloud-desktop

    echo "Install Obsidian."
    wcurl https://github.com/obsidianmd/obsidian-releases/releases/download/v1.7.4/obsidian_1.7.4_amd64.deb
    sudo apt install -y ./obsidian_1.7.4_amd64.deb
    rm obsidian_1.7.4_amd64.deb
}

function install-docker() {
    echo "Install docker."
    # https://docs.docker.com/engine/install/debian/#install-using-the-repository

    sudo apt-get update
    sudo apt-get install ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update

    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    sudo usermod -aG docker $USER
}

function install-kubectl() {
    echo "Install kubectl."
    # https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list 
    sudo apt-get update && sudo apt-get install -y kubectl
}

function install-kind() {
    install-kubectl
    
    echo "Install kind."
    # https://kind.sigs.k8s.io/docs/user/quick-start/#installation
    # For AMD64 / x86_64
    [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64
    # For ARM64
    [ $(uname -m) = aarch64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-arm64
    chmod +x ./kind
    sudo mv ./kind /usr/local/bin/kind
}

function install-minikube() {
    install-kubectl

    echo "Install minikube."
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
}

function install-dev-tools() {
    echo "Install vscodium."
    wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
        | gpg --dearmor \
        | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] https://download.vscodium.com/debs vscodium main' \
        | sudo tee /etc/apt/sources.list.d/vscodium.list
    sudo apt update && sudo apt install codium
    
    echo "Install rust and cargo."
    curl https://sh.rustup.rs -sSf | sh

    echo "Install node version manager."
    [ ! -d "$HOME/.nvm" ] && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash

    echo "Install python version manager."
    [ ! -d "$HOME/.pyenv" ] && git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    
    echo "Install postgres."
    sudo apt install -y postgresql-common

    echo "Install python build dependencies."
    # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
    sudo apt update; sudo apt install build-essential libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev curl git \
    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

    echo "Install binaries."
    sudo apt install -y jq htop xclip ripgrep
}

function install-pass() {
    echo "Install pass."
    sudo apt install -y pass pass-extension-otp

    echo "Clone pass repo."
    [ ! -d "$HOME/.password-store" ] && git clone git@gitlab.com:janikvonrotz/pass.git ~/.password-store

    echo "Import gpg key with this command."
    echo "gpg --import /path/to/user@example.com.private.gpg"
}

function install-tmux() {

    echo "Install tmux."
    sudo apt install -y tmux

    echo "Install tmux plugins."
    [ ! -d "$HOME/.tmux" ] && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    echo "Copy tmux config."
    cp tmux/.tmux.conf ~

    echo "Open tmux and install plugins with: ctrl + b; shift + i"
}

function install-fish() {
    echo "Install fish."
    sudo apt install -y fish

    mkdir -p ~/.config/fish/completions

    echo "Copy fish config."
    cp fish/config.fish ~/.config/fish/config.fish

    echo "Copy fish completions."
    cp fish/completions/* ~/.config/fish/completions/
}

function install-vim() {
    echo "Install vim."
    sudo apt install -y vim

    echo "Copy vimrc config."
    cp vim/.vimrc ~

    echo "Install vim plugins."
    vim -c ":PlugInstall"
}

function install-helix() {
    echo "Add helix ppa."
    sudo add-apt-repository ppa:maveonair/helix-editor
    sudo apt update

    echo "Install helix."
    sudo apt install helix

    echo "Copy vim keybindings."
    cp helix/config.toml ~/.config/helix/config.toml
}

function install-nvim() {
    echo "Add neovim ppa."
    sudo add-apt-repository ppa:neovim-ppa/stable -y
    sudo apt update

    echo "Install neovim."
    sudo apt install -y neovim
}

function install-bash() {
    echo "Copy bash completions."
    sudo cp bash/completions/* /etc/bash_completion.d/

    echo "Copy bash aliases."
    sudo cp bash/.bash_aliases ~/.bash_aliases
}

function install-zsh() {
    echo "Install zsh."
    sudo apt install -y zsh

    echo "Reset zsh."
    ZSH=

    echo "Remove oh-my-zsh folder."
    rm -rf ~/.oh-my-zsh

    echo "Set zsh custom."
    ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}
    cd ~

    echo "Install oh-my-zsh."
    curl -L https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh

    echo "Clone zsh autosuggestions."
    [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ] && git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"

    echo "Copy oh-my-zsh customizations."
    cp ~/dotfiles/oh-my-zsh/custom/*.zsh ~/.oh-my-zsh/custom

    echo "Copy oh-my-zsh completions."
    cp -r ~/dotfiles/oh-my-zsh/completions ~/.oh-my-zsh/completions

    echo "Clone z plugin."
    [ ! -d "$ZSH_CUSTOM/plugins/zsh-z" ] && git clone https://github.com/agkozak/zsh-z "$ZSH_CUSTOM/plugins/zsh-z"

    echo "Set plugins list for zshrc."
    sed -i'' 's/plugins=.*/plugins=(git fzf zsh-z ansible docker nvm pyenv kubectl minikube)/g' ~/.zshrc
}

function install-zsh-theme() {
    echo "Clone and copy dracula theme."
    [ ! -d "zsh" ] && git clone https://github.com/dracula/zsh.git
    ln -s ~/dotfiles/zsh/dracula.zsh-theme ~/.oh-my-zsh/themes/dracula.zsh-theme

    echo "Set zsh default theme."
    sed -i'' 's/ZSH_THEME.*/ZSH_THEME="dracula"/g' ~/.zshrc
}

function install-git() {
    echo "Copy git config."
    cp git/.gitconfig ~
}

function setup-private() {
    echo "Pull janikvonrotz repos."
    [ ! -d "$HOME/knowledge" ] && git clone https://gitlab.com/janikvonrotz/knowlege ~/knowledge
}

function setup-work() {
    echo "Pull Mint-System repos."
    [ ! -d "$HOME/Odoo-Build" ] && git clone git@github.com:Mint-System/Odoo-Build.git ~/Odoo-Build
    [ ! -d "$HOME/Odoo-Wiki" ] && git clone git@github.com:Mint-System/Odoo-Wiki.git ~/Odoo-Wiki
    [ ! -d "$HOME/Ansible-Build" ] && git clone git@github.com:Mint-System/Ansible-Build.git ~?/Ansible-Build
    [ ! -d "$HOME/Wiki" ] && git clone git@github.com:Mint-System/Wiki.git ~/Wiki
}

function update-pyenv() {
    echo "Update pyenv"
    cd ~/.pyenv
    git pull
}

case "$1" in
    enable-passwordless-sudo)
        enable-passwordless-sudo
        ;;
    install-desktop)
        install-desktop
        ;;
    install-dev-tools)
        install-dev-tools
        ;;
    install-docker)
        install-docker
        ;;
    install-kind)
        install-kind
        ;;
    install-minikube)
        install-minikube
        ;;
    install-tmux)
        install-tmux
        ;;
    install-vim)
        install-vim
        ;;
    install-helix)
        install-helix
        ;;
    install-nvim)
        install-nvim
        ;;
    install-bash)
        install-bash
        ;;
    install-zsh)
        install-zsh
        ;;
    install-fish)
        install-fish
        ;;
    install-git)
        install-git
        ;;
    install-pass)
        install-pass
        ;;
    install-zsh-theme)
        install-zsh-theme
        ;;
    setup-work)
        setup-work
        ;;
    setup-private)
        setup-private
        ;;
    update-pyenv)
        update-pyenv
        ;;
    *)
        help task
        exit 1
        ;;
esac
